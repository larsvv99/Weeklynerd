{% layout "layouts/base.liquid" %}

{% block content %}
<section class="reflectie">

    <h2>Declaritive vs imperative</h2>
    <p>
        Jeremy begon zijn verhaal met een analogie tussen muziek en programmering. Hij vergeleek Mozart, die klassieke
        muziek
        componeerde met geschreven noten (declarative), met Miles Davis, die zijn jazzstukken improviseerde
        (imperative). Dit
        contrast legde de basis voor een dieper begrip van declarative en imperative benaderingen in programmeren.
    </p>
    <p>
        In de wereld van programmering werkt imperative programming door het schrijven van code die stap voor stap
        vertelt wat
        er moet gebeuren. Declarative programming daarentegen, specificeert alleen het gewenste resultaat zonder precies
        te
        vertellen hoe dit bereikt moet worden.
    </p>
    <p>
        Voor het web betekent dit dat HTML en CSS declarative talen zijn. HTML structureert documenten en CSS geeft
        styling
        suggesties aan de webbrowser. JavaScript is daarentegen een imperative taal, die veel mogelijkheden biedt maar
        ook een
        grotere kans op fouten introduceert. HTML en CSS blijven functioneren zelfs als er fouten zijn, wat ze zeer
        vergevingsgezind maakt. JavaScript daarentegen stopt vaak helemaal met werken als er een fout optreedt.
    </p>
    <p>
        Jeremy benadrukte de mindset van declarative versus imperative ontwerpen. Hij gaf het voorbeeld van een div
        gebruiken
        als een knop, wat veel JavaScript vereist, versus het gebruik van een button element, dat al de nodige regels
        en
        interacties bevat. Dit illustreert het voordeel van declarative ontwerpen: je maakt gebruik van de
        ingebouwde
        functionaliteit en regels van HTML.
    </p>
    <h3>Ingebouwde functionaliteiten</h3>
    <p>
        Jeremy benadrukte de mindset van declarative versus imperative ontwerpen. Hij gaf het voorbeeld van een div
        gebruiken
        als een knop, wat veel JavaScript vereist, versus het gebruik van een button element, dat al de nodige regels
        en
        interacties bevat. Dit illustreert het voordeel van declarative ontwerpen: je maakt gebruik van de
        ingebouwde
        functionaliteit en regels van HTML.
    </p>
    <p>
        Een belangrijke boodschap van Jeremy was: "JavaScript should only do what only JavaScript can do." Dit betekent
        dat
        je alleen JavaScript moet gebruiken als het echt nodig is. Hij moedigde ons aan om de browser suggesties te
        geven in
        plaats van te dicteren wat er moet gebeuren. Bijvoorbeeld, in plaats van een exacte grootte en padding te
        specificeren, kun je flexibele eenheden zoals rem gebruiken.
    </p>

    <h3>Grenzen stellen</h3>
    <p>
        Daarnaast introduceerde Jeremy concepten zoals clamp(), min(), max(), en calc() om grenzen te stellen en een
        beetje
        controle terug te nemen over hoe de browser content weergeeft. Hij verwees naar websites zoals utopia.fyi en
        buildexcellentwebsite.es voor meer informatie en inspiratie.
    </p>

    <h2>Wat vond ik interessant?</h2>
    <p>
        Ik vond het heel fijn dat hij begon met een metafoor voor het uitleggen van declarative en imperative. Hierdoor
        was het voor mij duidelijker wat het verschil is tussen de twee. Daarnaast vond ik het heel interessant dat hij
        het had over de ingebouwde functionaliteiten van HTML en CSS. Ik wist wel dat dat het handig is om zoveel
        mogelijk van de bestaande functionaliteiten van html gebruik moet maken. Ik vond dit de beste presentatie tot nu
        toe het was fijn om naar te luisteren en het stak goed in elkaar.
    </p>

    <h2>Wat neem ik mee?</h2>
    <ul>
        <li>
            <p>
                Zoals ik ook al bij de weekly nerd van Kilian zei is Javascript pas gebruiken als dat nodig is.
            </p>
        </li>
        <li>
            <p>Het gebruik maken van de fucnties om grenzen te stellen, als dat nodig is.</p>
        </li>
    </ul>

</section>
<section class="prev_next">
    <a href="/jeffrey_arts" class="button">Vorige Weekly Nerd {% include "partials/prev_next.liquid" %}</a>
    <a href="/julia_miocene" class="button">Volgende Weekly Nerd {% include "partials/prev_next.liquid" %}</a>
</section>
{% endblock %}